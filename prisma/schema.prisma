// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String         @id @default(cuid())
    name             String?
    username         String?        @unique
    email            String?        @unique
    emailVerified    DateTime?
    image            String?
    characterLink    String?
    description      String?
    discord          String?
    twitter          String?
    youtube          String?
    role             Role           @default(USER)
    accounts         Account[]
    sessions         Session[]
    paymentOrder     PaymentOrder[]
    serverRegistered String[]
    gameInfos        GameInfos?     @relation(fields: [gameInfosId], references: [id])
    gameInfosId      String?        @unique
    userWallet       UserWallet?    @relation(fields: [userWalletId], references: [id])
    userWalletId     String?        @unique
}

enum Role {
    USER
    ADMIN
    BAN
}

model GameInfos {
    id          String  @id @default(cuid())
    level       Int     @default(1)
    rank        String?
    totalMatchs Int     @default(0)
    totalWins   Int     @default(0)
    totalDraws  Int     @default(0)
    totalLooses Int     @default(0)
    lastMatchId String?
    user        User?
}

model Server {
    id                     String   @id @default(cuid())
    name                   String   @unique
    startDate              DateTime
    finishDate             DateTime
    gameCategory           String
    linkImage              String?
    totalPlayersRegistered Int      @default(0)
    totalTeamRegistered    Int      @default(0)
    serverMatchs           Match[]
}

model Match {
    id               String   @id @default(cuid())
    created_at       DateTime @default(now())
    matchPostId      String
    gameCategory     String
    playersByTeam    Int
    team_a_playerIds String[]
    team_b_playerIds String[]
    createdBy        String
    acceptedBy       String
    map              Int
    isDraft          Boolean  @default(false)
    draftLink        String?
    compo_team_a     String[]
    compo_team_b     String[]
    score_team_a     Int?
    score_team_b     Int?
    winnerTeam       String
    linkImageProof   String?
    teamA_submited   Boolean  @default(false)
    teamB_submited   Boolean  @default(false)
    server           Server?  @relation(fields: [serverId], references: [id])
    serverId         String?
}

model MatchPost {
    id              String   @id @default(cuid())
    gameCategory    String
    playersByTeam   Int
    createdBy       String
    acceptedBy      String?
    isDraft         Boolean  @default(false)
    draftLink       String?
    compo_team_a    String[]
    teamA_playerIds String[]
    compo_team_b    String[]
    teamB_playerIds String[]
    isMatchAccepted Boolean  @default(false)
}

model UserWallet {
    id            String @id @default(cuid())
    tokensWallet  Float  @default(10)
    totalEarnings Float  @default(0)
    totalSpends   Float  @default(0)
    User          User?
}

model PaymentOrder {
    id                String        @id @default(cuid())
    user              User          @relation(fields: [userId], references: [id])
    userId            String
    productName       String
    codeCreator       String?
    checkoutSessionId String
    status            String
    billingInfos      BillingInfos? @relation(fields: [billingInfosId], references: [id])
    billingInfosId    String?
}

model BillingInfos {
    id            String          @id @default(cuid())
    firstName     String?
    lastName      String?
    country       String?
    street        String?
    number        String?
    zipCode       String?
    iban          String?
    PaymentOrder  PaymentOrder[]
    cashoutDemand CashoutDemand[]
}

model CashoutDemand {
    id             String        @id @default(cuid())
    amount         Float?
    BillingInfos   BillingInfos? @relation(fields: [billingInfosId], references: [id])
    billingInfosId String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
